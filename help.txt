sudo docker-compose -f docker-compose.dev.yml exec db bash

Andres!123

### Clean cache of yarn

yarn cache clean


#### CODE FROM SERVER WHEN NEXT-ROUTES WORKS

const express = require("express");
const next = require("next");
const cookieParser = require("cookie-parser");
const { join } = require("path");
const { parse } = require("url");

const routes = require("./routes");

const dev = process.env.NODE_ENV !== "production";
const app = next({ dev, dir: "src" });
const handler = routes.getRequestHandler(app);

async function isLoggedIn(req, res, funcNext) {
	const cookie = await req.cookies["qid"];
	if (cookie) {
		return res.redirect("/");
	}
	return funcNext();
}

async function isNotLoggedIn(req, res, funcNext) {
	const cookie = await req.cookies["qid"];
	if (cookie) {
		return funcNext();
	}
	return res.redirect("/login");
}

function checkAuth(req, res, funcNext) {
	if (req.path.startsWith("/login") || req.path.startsWith("/register")) {
		return isLoggedIn(req, res, funcNext);
	}

	return isNotLoggedIn(req, res, funcNext);
}

app
	.prepare()
	.then(() => {
		const server = express();

		server
			.use(cookieParser())
			.use(express.static(`${__dirname}/static`))
			.get("/service-worker.js", (req, res) => {
				const parsedUrl = parse(req.url, true);
				const { pathname } = parsedUrl;
				const filePath = join(__dirname, ".next", pathname);
				app.serveStatic(req, res, filePath);
			})
			.use(checkAuth)
			.use(handler)
			.listen(process.env.PORT || 3000);
	})
	.catch(err => {
		console.log(err);
		process.exit(1);
	});
